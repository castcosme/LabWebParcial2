(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs')) :
    typeof define === 'function' && define.amd ? define('apollo-angular-link-http-common', ['exports', 'rxjs'], factory) :
    (factory((global['ng.apolloLink.httpCommon'] = {}),global.rxjs));
}(this, (function (exports,rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var fetch = ( /**
     * @param {?} req
     * @param {?} httpClient
     * @return {?}
     */function (req, httpClient) {
        /** @type {?} */
        var shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
        /** @type {?} */
        var shouldStringify = ( /**
         * @param {?} param
         * @return {?}
         */function (param) {
            return ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
        });
        // `body` for some, `params` for others
        /** @type {?} */
        var bodyOrParams = {};
        if ((( /** @type {?} */(req.body))).length) {
            if (!shouldUseBody) {
                return new rxjs.Observable(( /**
                 * @param {?} observer
                 * @return {?}
                 */function (observer) {
                    return observer.error(new Error('Batching is not available for GET requests'));
                }));
            }
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            if (shouldUseBody) {
                bodyOrParams = {
                    body: req.body,
                };
            }
            else {
                /** @type {?} */
                var params = Object.keys(req.body).reduce(( /**
                 * @param {?} obj
                 * @param {?} param
                 * @return {?}
                 */function (obj, param) {
                    /** @type {?} */
                    var value = (( /** @type {?} */(req.body)))[param];
                    obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;
                    return obj;
                }), {});
                bodyOrParams = { params: params };
            }
        }
        // create a request
        return httpClient.request(req.method, req.url, __assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
    });
    /** @type {?} */
    var mergeHeaders = ( /**
     * @param {?} source
     * @param {?} destination
     * @return {?}
     */function (source, destination) {
        if (source && destination) {
            /** @type {?} */
            var merged = destination
                .keys()
                .reduce(( /**
         * @param {?} headers
         * @param {?} name
         * @return {?}
         */function (headers, name) { return headers.set(name, destination.getAll(name)); }), source);
            return merged;
        }
        return destination || source;
    });
    /**
     * @template T
     * @param {...?} values
     * @return {?}
     */
    function prioritize() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        /** @type {?} */
        var picked = values.find(( /**
         * @param {?} val
         * @return {?}
         */function (val) { return typeof val !== 'undefined'; }));
        if (typeof picked === 'undefined') {
            return values[values.length - 1];
        }
        return picked;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.prioritize = prioritize;
    exports.fetch = fetch;
    exports.mergeHeaders = mergeHeaders;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng.apolloLink.httpCommon.umd.js.map