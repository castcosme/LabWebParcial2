/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
/** @type {?} */
export const fetch = (/**
 * @param {?} req
 * @param {?} httpClient
 * @return {?}
 */
(req, httpClient) => {
    /** @type {?} */
    const shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
    /** @type {?} */
    const shouldStringify = (/**
     * @param {?} param
     * @return {?}
     */
    (param) => ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1);
    // `body` for some, `params` for others
    /** @type {?} */
    let bodyOrParams = {};
    if (((/** @type {?} */ (req.body))).length) {
        if (!shouldUseBody) {
            return new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            observer => observer.error(new Error('Batching is not available for GET requests'))));
        }
        bodyOrParams = {
            body: req.body,
        };
    }
    else {
        if (shouldUseBody) {
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            /** @type {?} */
            const params = Object.keys(req.body).reduce((/**
             * @param {?} obj
             * @param {?} param
             * @return {?}
             */
            (obj, param) => {
                /** @type {?} */
                const value = ((/** @type {?} */ (req.body)))[param];
                obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;
                return obj;
            }), {});
            bodyOrParams = { params: params };
        }
    }
    // create a request
    return httpClient.request(req.method, req.url, Object.assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
});
/** @type {?} */
export const mergeHeaders = (/**
 * @param {?} source
 * @param {?} destination
 * @return {?}
 */
(source, destination) => {
    if (source && destination) {
        /** @type {?} */
        const merged = destination
            .keys()
            .reduce((/**
         * @param {?} headers
         * @param {?} name
         * @return {?}
         */
        (headers, name) => headers.set(name, destination.getAll(name))), source);
        return merged;
    }
    return destination || source;
});
/**
 * @template T
 * @param {...?} values
 * @return {?}
 */
export function prioritize(...values) {
    /** @type {?} */
    const picked = values.find((/**
     * @param {?} val
     * @return {?}
     */
    val => typeof val !== 'undefined'));
    if (typeof picked === 'undefined') {
        return values[values.length - 1];
    }
    return picked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAtY29tbW9uLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBSWhDLE1BQU0sT0FBTyxLQUFLOzs7OztBQUFHLENBQ25CLEdBQVksRUFDWixVQUFzQixFQUNZLEVBQUU7O1VBQzlCLGFBQWEsR0FDakIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDOztVQUM3RCxlQUFlOzs7O0lBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUN4QyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7OztRQUc3RCxZQUFZLEdBQUcsRUFBRTtJQUVyQixJQUFJLENBQUMsbUJBQUEsR0FBRyxDQUFDLElBQUksRUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQy9CLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsT0FBTyxJQUFJLFVBQVU7Ozs7WUFBQyxRQUFRLENBQUMsRUFBRSxDQUMvQixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsRUFDeEUsQ0FBQztTQUNIO1FBRUQsWUFBWSxHQUFHO1lBQ2IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1NBQ2YsQ0FBQztLQUNIO1NBQU07UUFDTCxJQUFJLGFBQWEsRUFBRTtZQUNqQixZQUFZLEdBQUc7Z0JBQ2IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO2FBQ2YsQ0FBQztTQUNIO2FBQU07O2tCQUNDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNOzs7OztZQUFDLENBQUMsR0FBUSxFQUFFLEtBQUssRUFBRSxFQUFFOztzQkFDeEQsS0FBSyxHQUFHLENBQUMsbUJBQUEsR0FBRyxDQUFDLElBQUksRUFBTyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUN0QyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQ3BFLE9BQU8sR0FBRyxDQUFDO1lBQ2IsQ0FBQyxHQUFFLEVBQUUsQ0FBQztZQUVOLFlBQVksR0FBRyxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQztTQUNqQztLQUNGO0lBRUQsbUJBQW1CO0lBQ25CLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLGtCQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUNuQixZQUFZLEVBQUUsTUFBTSxFQUNwQixjQUFjLEVBQUUsS0FBSyxJQUNsQixZQUFZLEVBQ1osR0FBRyxDQUFDLE9BQU8sRUFDZCxDQUFDO0FBQ0wsQ0FBQyxDQUFBOztBQUVELE1BQU0sT0FBTyxZQUFZOzs7OztBQUFHLENBQzFCLE1BQW1CLEVBQ25CLFdBQXdCLEVBQ1gsRUFBRTtJQUNmLElBQUksTUFBTSxJQUFJLFdBQVcsRUFBRTs7Y0FDbkIsTUFBTSxHQUFHLFdBQVc7YUFDdkIsSUFBSSxFQUFFO2FBQ04sTUFBTTs7Ozs7UUFDTCxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FDOUQsTUFBTSxDQUNQO1FBRUgsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELE9BQU8sV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUMvQixDQUFDLENBQUE7Ozs7OztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUksR0FBRyxNQUFXOztVQUNwQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUk7Ozs7SUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLFdBQVcsRUFBQztJQUU3RCxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtRQUNqQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cEhlYWRlcnMsIEh0dHBSZXNwb25zZSwgSHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtSZXF1ZXN0fSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGZldGNoID0gKFxuICByZXE6IFJlcXVlc3QsXG4gIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXG4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxPYmplY3Q+PiA9PiB7XG4gIGNvbnN0IHNob3VsZFVzZUJvZHkgPVxuICAgIFsnUE9TVCcsICdQVVQnLCAnUEFUQ0gnXS5pbmRleE9mKHJlcS5tZXRob2QudG9VcHBlckNhc2UoKSkgIT09IC0xO1xuICBjb25zdCBzaG91bGRTdHJpbmdpZnkgPSAocGFyYW06IHN0cmluZykgPT5cbiAgICBbJ3ZhcmlhYmxlcycsICdleHRlbnNpb25zJ10uaW5kZXhPZihwYXJhbS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG5cbiAgLy8gYGJvZHlgIGZvciBzb21lLCBgcGFyYW1zYCBmb3Igb3RoZXJzXG4gIGxldCBib2R5T3JQYXJhbXMgPSB7fTtcblxuICBpZiAoKHJlcS5ib2R5IGFzIEJvZHlbXSkubGVuZ3RoKSB7XG4gICAgaWYgKCFzaG91bGRVc2VCb2R5KSB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT5cbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IobmV3IEVycm9yKCdCYXRjaGluZyBpcyBub3QgYXZhaWxhYmxlIGZvciBHRVQgcmVxdWVzdHMnKSksXG4gICAgICApO1xuICAgIH1cblxuICAgIGJvZHlPclBhcmFtcyA9IHtcbiAgICAgIGJvZHk6IHJlcS5ib2R5LFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNob3VsZFVzZUJvZHkpIHtcbiAgICAgIGJvZHlPclBhcmFtcyA9IHtcbiAgICAgICAgYm9keTogcmVxLmJvZHksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBPYmplY3Qua2V5cyhyZXEuYm9keSkucmVkdWNlKChvYmo6IGFueSwgcGFyYW0pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAocmVxLmJvZHkgYXMgYW55KVtwYXJhbV07XG4gICAgICAgIG9ialtwYXJhbV0gPSBzaG91bGRTdHJpbmdpZnkocGFyYW0pID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9LCB7fSk7XG5cbiAgICAgIGJvZHlPclBhcmFtcyA9IHtwYXJhbXM6IHBhcmFtc307XG4gICAgfVxuICB9XG5cbiAgLy8gY3JlYXRlIGEgcmVxdWVzdFxuICByZXR1cm4gaHR0cENsaWVudC5yZXF1ZXN0PE9iamVjdD4ocmVxLm1ldGhvZCwgcmVxLnVybCwge1xuICAgIG9ic2VydmU6ICdyZXNwb25zZScsXG4gICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgcmVwb3J0UHJvZ3Jlc3M6IGZhbHNlLFxuICAgIC4uLmJvZHlPclBhcmFtcyxcbiAgICAuLi5yZXEub3B0aW9ucyxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgbWVyZ2VIZWFkZXJzID0gKFxuICBzb3VyY2U6IEh0dHBIZWFkZXJzLFxuICBkZXN0aW5hdGlvbjogSHR0cEhlYWRlcnMsXG4pOiBIdHRwSGVhZGVycyA9PiB7XG4gIGlmIChzb3VyY2UgJiYgZGVzdGluYXRpb24pIHtcbiAgICBjb25zdCBtZXJnZWQgPSBkZXN0aW5hdGlvblxuICAgICAgLmtleXMoKVxuICAgICAgLnJlZHVjZShcbiAgICAgICAgKGhlYWRlcnMsIG5hbWUpID0+IGhlYWRlcnMuc2V0KG5hbWUsIGRlc3RpbmF0aW9uLmdldEFsbChuYW1lKSksXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICk7XG5cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9XG5cbiAgcmV0dXJuIGRlc3RpbmF0aW9uIHx8IHNvdXJjZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmlvcml0aXplPFQ+KC4uLnZhbHVlczogVFtdKTogVCB7XG4gIGNvbnN0IHBpY2tlZCA9IHZhbHVlcy5maW5kKHZhbCA9PiB0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJyk7XG5cbiAgaWYgKHR5cGVvZiBwaWNrZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV07XG4gIH1cblxuICByZXR1cm4gcGlja2VkO1xufVxuIl19