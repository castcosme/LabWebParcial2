/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Observable } from 'rxjs';
/** @type {?} */
export var fetch = (/**
 * @param {?} req
 * @param {?} httpClient
 * @return {?}
 */
function (req, httpClient) {
    /** @type {?} */
    var shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
    /** @type {?} */
    var shouldStringify = (/**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        return ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
    });
    // `body` for some, `params` for others
    /** @type {?} */
    var bodyOrParams = {};
    if (((/** @type {?} */ (req.body))).length) {
        if (!shouldUseBody) {
            return new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                return observer.error(new Error('Batching is not available for GET requests'));
            }));
        }
        bodyOrParams = {
            body: req.body,
        };
    }
    else {
        if (shouldUseBody) {
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            /** @type {?} */
            var params = Object.keys(req.body).reduce((/**
             * @param {?} obj
             * @param {?} param
             * @return {?}
             */
            function (obj, param) {
                /** @type {?} */
                var value = ((/** @type {?} */ (req.body)))[param];
                obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;
                return obj;
            }), {});
            bodyOrParams = { params: params };
        }
    }
    // create a request
    return httpClient.request(req.method, req.url, tslib_1.__assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
});
/** @type {?} */
export var mergeHeaders = (/**
 * @param {?} source
 * @param {?} destination
 * @return {?}
 */
function (source, destination) {
    if (source && destination) {
        /** @type {?} */
        var merged = destination
            .keys()
            .reduce((/**
         * @param {?} headers
         * @param {?} name
         * @return {?}
         */
        function (headers, name) { return headers.set(name, destination.getAll(name)); }), source);
        return merged;
    }
    return destination || source;
});
/**
 * @template T
 * @param {...?} values
 * @return {?}
 */
export function prioritize() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    /** @type {?} */
    var picked = values.find((/**
     * @param {?} val
     * @return {?}
     */
    function (val) { return typeof val !== 'undefined'; }));
    if (typeof picked === 'undefined') {
        return values[values.length - 1];
    }
    return picked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAtY29tbW9uLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUloQyxNQUFNLEtBQU8sS0FBSzs7Ozs7QUFBRyxVQUNuQixHQUFZLEVBQ1osVUFBc0I7O1FBRWhCLGFBQWEsR0FDakIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDOztRQUM3RCxlQUFlOzs7O0lBQUcsVUFBQyxLQUFhO1FBQ3BDLE9BQUEsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUEvRCxDQUErRCxDQUFBOzs7UUFHN0QsWUFBWSxHQUFHLEVBQUU7SUFFckIsSUFBSSxDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxVQUFVOzs7O1lBQUMsVUFBQSxRQUFRO2dCQUM1QixPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztZQUF2RSxDQUF1RSxFQUN4RSxDQUFDO1NBQ0g7UUFFRCxZQUFZLEdBQUc7WUFDYixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7U0FDZixDQUFDO0tBQ0g7U0FBTTtRQUNMLElBQUksYUFBYSxFQUFFO1lBQ2pCLFlBQVksR0FBRztnQkFDYixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7YUFDZixDQUFDO1NBQ0g7YUFBTTs7Z0JBQ0MsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07Ozs7O1lBQUMsVUFBQyxHQUFRLEVBQUUsS0FBSzs7b0JBQ3BELEtBQUssR0FBRyxDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDdEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUNwRSxPQUFPLEdBQUcsQ0FBQztZQUNiLENBQUMsR0FBRSxFQUFFLENBQUM7WUFFTixZQUFZLEdBQUcsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLENBQUM7U0FDakM7S0FDRjtJQUVELG1CQUFtQjtJQUNuQixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxxQkFDbkQsT0FBTyxFQUFFLFVBQVUsRUFDbkIsWUFBWSxFQUFFLE1BQU0sRUFDcEIsY0FBYyxFQUFFLEtBQUssSUFDbEIsWUFBWSxFQUNaLEdBQUcsQ0FBQyxPQUFPLEVBQ2QsQ0FBQztBQUNMLENBQUMsQ0FBQTs7QUFFRCxNQUFNLEtBQU8sWUFBWTs7Ozs7QUFBRyxVQUMxQixNQUFtQixFQUNuQixXQUF3QjtJQUV4QixJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUU7O1lBQ25CLE1BQU0sR0FBRyxXQUFXO2FBQ3ZCLElBQUksRUFBRTthQUNOLE1BQU07Ozs7O1FBQ0wsVUFBQyxPQUFPLEVBQUUsSUFBSSxJQUFLLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUEzQyxDQUEyQyxHQUM5RCxNQUFNLENBQ1A7UUFFSCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsT0FBTyxXQUFXLElBQUksTUFBTSxDQUFDO0FBQy9CLENBQUMsQ0FBQTs7Ozs7O0FBRUQsTUFBTSxVQUFVLFVBQVU7SUFBSSxnQkFBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCwyQkFBYzs7O1FBQ3BDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSTs7OztJQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsT0FBTyxHQUFHLEtBQUssV0FBVyxFQUExQixDQUEwQixFQUFDO0lBRTdELElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO1FBQ2pDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDbEM7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwSGVhZGVycywgSHR0cFJlc3BvbnNlLCBIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1JlcXVlc3R9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZmV0Y2ggPSAoXG4gIHJlcTogUmVxdWVzdCxcbiAgaHR0cENsaWVudDogSHR0cENsaWVudCxcbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPE9iamVjdD4+ID0+IHtcbiAgY29uc3Qgc2hvdWxkVXNlQm9keSA9XG4gICAgWydQT1NUJywgJ1BVVCcsICdQQVRDSCddLmluZGV4T2YocmVxLm1ldGhvZC50b1VwcGVyQ2FzZSgpKSAhPT0gLTE7XG4gIGNvbnN0IHNob3VsZFN0cmluZ2lmeSA9IChwYXJhbTogc3RyaW5nKSA9PlxuICAgIFsndmFyaWFibGVzJywgJ2V4dGVuc2lvbnMnXS5pbmRleE9mKHBhcmFtLnRvTG93ZXJDYXNlKCkpICE9PSAtMTtcblxuICAvLyBgYm9keWAgZm9yIHNvbWUsIGBwYXJhbXNgIGZvciBvdGhlcnNcbiAgbGV0IGJvZHlPclBhcmFtcyA9IHt9O1xuXG4gIGlmICgocmVxLmJvZHkgYXMgQm9keVtdKS5sZW5ndGgpIHtcbiAgICBpZiAoIXNob3VsZFVzZUJvZHkpIHtcbiAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PlxuICAgICAgICBvYnNlcnZlci5lcnJvcihuZXcgRXJyb3IoJ0JhdGNoaW5nIGlzIG5vdCBhdmFpbGFibGUgZm9yIEdFVCByZXF1ZXN0cycpKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgYm9keU9yUGFyYW1zID0ge1xuICAgICAgYm9keTogcmVxLmJvZHksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2hvdWxkVXNlQm9keSkge1xuICAgICAgYm9keU9yUGFyYW1zID0ge1xuICAgICAgICBib2R5OiByZXEuYm9keSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5rZXlzKHJlcS5ib2R5KS5yZWR1Y2UoKG9iajogYW55LCBwYXJhbSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IChyZXEuYm9keSBhcyBhbnkpW3BhcmFtXTtcbiAgICAgICAgb2JqW3BhcmFtXSA9IHNob3VsZFN0cmluZ2lmeShwYXJhbSkgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sIHt9KTtcblxuICAgICAgYm9keU9yUGFyYW1zID0ge3BhcmFtczogcGFyYW1zfTtcbiAgICB9XG4gIH1cblxuICAvLyBjcmVhdGUgYSByZXF1ZXN0XG4gIHJldHVybiBodHRwQ2xpZW50LnJlcXVlc3Q8T2JqZWN0PihyZXEubWV0aG9kLCByZXEudXJsLCB7XG4gICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyxcbiAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICByZXBvcnRQcm9ncmVzczogZmFsc2UsXG4gICAgLi4uYm9keU9yUGFyYW1zLFxuICAgIC4uLnJlcS5vcHRpb25zLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBtZXJnZUhlYWRlcnMgPSAoXG4gIHNvdXJjZTogSHR0cEhlYWRlcnMsXG4gIGRlc3RpbmF0aW9uOiBIdHRwSGVhZGVycyxcbik6IEh0dHBIZWFkZXJzID0+IHtcbiAgaWYgKHNvdXJjZSAmJiBkZXN0aW5hdGlvbikge1xuICAgIGNvbnN0IG1lcmdlZCA9IGRlc3RpbmF0aW9uXG4gICAgICAua2V5cygpXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoaGVhZGVycywgbmFtZSkgPT4gaGVhZGVycy5zZXQobmFtZSwgZGVzdGluYXRpb24uZ2V0QWxsKG5hbWUpKSxcbiAgICAgICAgc291cmNlLFxuICAgICAgKTtcblxuICAgIHJldHVybiBtZXJnZWQ7XG4gIH1cblxuICByZXR1cm4gZGVzdGluYXRpb24gfHwgc291cmNlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByaW9yaXRpemU8VD4oLi4udmFsdWVzOiBUW10pOiBUIHtcbiAgY29uc3QgcGlja2VkID0gdmFsdWVzLmZpbmQodmFsID0+IHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnKTtcblxuICBpZiAodHlwZW9mIHBpY2tlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHJldHVybiBwaWNrZWQ7XG59XG4iXX0=