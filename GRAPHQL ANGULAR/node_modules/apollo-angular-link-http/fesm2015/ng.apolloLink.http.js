import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable } from 'apollo-link';
import { print } from 'graphql/language/printer';
import { fetch, mergeHeaders, prioritize } from 'apollo-angular-link-http-common';
import { Injectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// XXX find a better name for it
class HttpLinkHandler extends ApolloLink {
    /**
     * @param {?} httpClient
     * @param {?} options
     */
    constructor(httpClient, options) {
        super();
        this.httpClient = httpClient;
        this.options = options;
        this.requester = (/**
         * @param {?} operation
         * @return {?}
         */
        (operation) => new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            /** @type {?} */
            const context = operation.getContext();
            // decides which value to pick, Context, Options or to just use the default
            /** @type {?} */
            const pick = (/**
             * @template K
             * @param {?} key
             * @param {?=} init
             * @return {?}
             */
            (key, init) => {
                return prioritize(context[key], this.options[key], init);
            });
            /** @type {?} */
            const includeQuery = pick('includeQuery', true);
            /** @type {?} */
            const includeExtensions = pick('includeExtensions', false);
            /** @type {?} */
            const method = pick('method', 'POST');
            /** @type {?} */
            const url = pick('uri', 'graphql');
            /** @type {?} */
            const withCredentials = pick('withCredentials');
            /** @type {?} */
            const req = {
                method,
                url: typeof url === 'function' ? url(operation) : url,
                body: {
                    operationName: operation.operationName,
                    variables: operation.variables,
                },
                options: {
                    withCredentials,
                    headers: this.options.headers,
                },
            };
            if (includeExtensions) {
                ((/** @type {?} */ (req.body))).extensions = operation.extensions;
            }
            if (includeQuery) {
                ((/** @type {?} */ (req.body))).query = print(operation.query);
            }
            if (context.headers) {
                req.options.headers = mergeHeaders(req.options.headers, context.headers);
            }
            /** @type {?} */
            const sub = fetch(req, this.httpClient).subscribe({
                next: (/**
                 * @param {?} response
                 * @return {?}
                 */
                response => {
                    operation.setContext({ response });
                    observer.next(response.body);
                }),
                error: (/**
                 * @param {?} err
                 * @return {?}
                 */
                err => observer.error(err)),
                complete: (/**
                 * @return {?}
                 */
                () => observer.complete()),
            });
            return (/**
             * @return {?}
             */
            () => {
                if (!sub.closed) {
                    sub.unsubscribe();
                }
            });
        })));
    }
    /**
     * @param {?} op
     * @return {?}
     */
    request(op) {
        return this.requester(op);
    }
}
class HttpLink {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    create(options) {
        return new HttpLinkHandler(this.httpClient, options);
    }
}
HttpLink.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpLink.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PROVIDERS = [HttpLink];
class HttpLinkModule {
}
HttpLinkModule.decorators = [
    { type: NgModule, args: [{
                providers: PROVIDERS,
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { HttpLink, HttpLinkHandler, HttpLinkModule, PROVIDERS };

//# sourceMappingURL=ng.apolloLink.http.js.map