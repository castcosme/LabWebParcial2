import { __extends } from 'tslib';
import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable } from 'apollo-link';
import { print } from 'graphql/language/printer';
import { fetch, mergeHeaders, prioritize } from 'apollo-angular-link-http-common';
import { Injectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// XXX find a better name for it
var  
// XXX find a better name for it
HttpLinkHandler = /** @class */ (function (_super) {
    __extends(HttpLinkHandler, _super);
    function HttpLinkHandler(httpClient, options) {
        var _this = _super.call(this) || this;
        _this.httpClient = httpClient;
        _this.options = options;
        _this.requester = (/**
         * @param {?} operation
         * @return {?}
         */
        function (operation) {
            return new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                /** @type {?} */
                var context = operation.getContext();
                // decides which value to pick, Context, Options or to just use the default
                /** @type {?} */
                var pick = (/**
                 * @template K
                 * @param {?} key
                 * @param {?=} init
                 * @return {?}
                 */
                function (key, init) {
                    return prioritize(context[key], _this.options[key], init);
                });
                /** @type {?} */
                var includeQuery = pick('includeQuery', true);
                /** @type {?} */
                var includeExtensions = pick('includeExtensions', false);
                /** @type {?} */
                var method = pick('method', 'POST');
                /** @type {?} */
                var url = pick('uri', 'graphql');
                /** @type {?} */
                var withCredentials = pick('withCredentials');
                /** @type {?} */
                var req = {
                    method: method,
                    url: typeof url === 'function' ? url(operation) : url,
                    body: {
                        operationName: operation.operationName,
                        variables: operation.variables,
                    },
                    options: {
                        withCredentials: withCredentials,
                        headers: _this.options.headers,
                    },
                };
                if (includeExtensions) {
                    ((/** @type {?} */ (req.body))).extensions = operation.extensions;
                }
                if (includeQuery) {
                    ((/** @type {?} */ (req.body))).query = print(operation.query);
                }
                if (context.headers) {
                    req.options.headers = mergeHeaders(req.options.headers, context.headers);
                }
                /** @type {?} */
                var sub = fetch(req, _this.httpClient).subscribe({
                    next: (/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        operation.setContext({ response: response });
                        observer.next(response.body);
                    }),
                    error: (/**
                     * @param {?} err
                     * @return {?}
                     */
                    function (err) { return observer.error(err); }),
                    complete: (/**
                     * @return {?}
                     */
                    function () { return observer.complete(); }),
                });
                return (/**
                 * @return {?}
                 */
                function () {
                    if (!sub.closed) {
                        sub.unsubscribe();
                    }
                });
            }));
        });
        return _this;
    }
    /**
     * @param {?} op
     * @return {?}
     */
    HttpLinkHandler.prototype.request = /**
     * @param {?} op
     * @return {?}
     */
    function (op) {
        return this.requester(op);
    };
    return HttpLinkHandler;
}(ApolloLink));
var HttpLink = /** @class */ (function () {
    function HttpLink(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    HttpLink.prototype.create = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new HttpLinkHandler(this.httpClient, options);
    };
    HttpLink.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpLink.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return HttpLink;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PROVIDERS = [HttpLink];
var HttpLinkModule = /** @class */ (function () {
    function HttpLinkModule() {
    }
    HttpLinkModule.decorators = [
        { type: NgModule, args: [{
                    providers: PROVIDERS,
                },] }
    ];
    return HttpLinkModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { HttpLink, HttpLinkHandler, HttpLinkModule, PROVIDERS };

//# sourceMappingURL=ng.apolloLink.http.js.map