(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('apollo-link'), require('graphql/language/printer'), require('apollo-angular-link-http-common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('apollo-angular-link-http', ['exports', '@angular/common/http', 'apollo-link', 'graphql/language/printer', 'apollo-angular-link-http-common', '@angular/core'], factory) :
    (factory((global['ng.apolloLink.http'] = {}),global.ng.common.http,global.apolloLink.core,global.printer,global.ng.apolloLink.httpCommon,global.ng.core));
}(this, (function (exports,http,apolloLink,printer,apolloAngularLinkHttpCommon,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // XXX find a better name for it
    var  
    // XXX find a better name for it
    HttpLinkHandler = /** @class */ (function (_super) {
        __extends(HttpLinkHandler, _super);
        function HttpLinkHandler(httpClient, options) {
            var _this = _super.call(this) || this;
            _this.httpClient = httpClient;
            _this.options = options;
            _this.requester = ( /**
             * @param {?} operation
             * @return {?}
             */function (operation) {
                return new apolloLink.Observable(( /**
                 * @param {?} observer
                 * @return {?}
                 */function (observer) {
                    /** @type {?} */
                    var context = operation.getContext();
                    // decides which value to pick, Context, Options or to just use the default
                    /** @type {?} */
                    var pick = ( /**
                     * @template K
                     * @param {?} key
                     * @param {?=} init
                     * @return {?}
                     */function (key, init) {
                        return apolloAngularLinkHttpCommon.prioritize(context[key], _this.options[key], init);
                    });
                    /** @type {?} */
                    var includeQuery = pick('includeQuery', true);
                    /** @type {?} */
                    var includeExtensions = pick('includeExtensions', false);
                    /** @type {?} */
                    var method = pick('method', 'POST');
                    /** @type {?} */
                    var url = pick('uri', 'graphql');
                    /** @type {?} */
                    var withCredentials = pick('withCredentials');
                    /** @type {?} */
                    var req = {
                        method: method,
                        url: typeof url === 'function' ? url(operation) : url,
                        body: {
                            operationName: operation.operationName,
                            variables: operation.variables,
                        },
                        options: {
                            withCredentials: withCredentials,
                            headers: _this.options.headers,
                        },
                    };
                    if (includeExtensions) {
                        (( /** @type {?} */(req.body))).extensions = operation.extensions;
                    }
                    if (includeQuery) {
                        (( /** @type {?} */(req.body))).query = printer.print(operation.query);
                    }
                    if (context.headers) {
                        req.options.headers = apolloAngularLinkHttpCommon.mergeHeaders(req.options.headers, context.headers);
                    }
                    /** @type {?} */
                    var sub = apolloAngularLinkHttpCommon.fetch(req, _this.httpClient).subscribe({
                        next: ( /**
                         * @param {?} response
                         * @return {?}
                         */function (response) {
                            operation.setContext({ response: response });
                            observer.next(response.body);
                        }),
                        error: ( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) { return observer.error(err); }),
                        complete: ( /**
                         * @return {?}
                         */function () { return observer.complete(); }),
                    });
                    return ( /**
                     * @return {?}
                     */function () {
                        if (!sub.closed) {
                            sub.unsubscribe();
                        }
                    });
                }));
            });
            return _this;
        }
        /**
         * @param {?} op
         * @return {?}
         */
        HttpLinkHandler.prototype.request = /**
         * @param {?} op
         * @return {?}
         */
            function (op) {
                return this.requester(op);
            };
        return HttpLinkHandler;
    }(apolloLink.ApolloLink));
    var HttpLink = /** @class */ (function () {
        function HttpLink(httpClient) {
            this.httpClient = httpClient;
        }
        /**
         * @param {?} options
         * @return {?}
         */
        HttpLink.prototype.create = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return new HttpLinkHandler(this.httpClient, options);
            };
        HttpLink.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        HttpLink.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return HttpLink;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PROVIDERS = [HttpLink];
    var HttpLinkModule = /** @class */ (function () {
        function HttpLinkModule() {
        }
        HttpLinkModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: PROVIDERS,
                    },] }
        ];
        return HttpLinkModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.HttpLink = HttpLink;
    exports.HttpLinkHandler = HttpLinkHandler;
    exports.HttpLinkModule = HttpLinkModule;
    exports.PROVIDERS = PROVIDERS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng.apolloLink.http.umd.js.map