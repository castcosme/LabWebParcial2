/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable as LinkObservable, } from 'apollo-link';
import { print } from 'graphql/language/printer';
import { fetch, mergeHeaders, prioritize, } from 'apollo-angular-link-http-common';
// XXX find a better name for it
var 
// XXX find a better name for it
HttpLinkHandler = /** @class */ (function (_super) {
    tslib_1.__extends(HttpLinkHandler, _super);
    function HttpLinkHandler(httpClient, options) {
        var _this = _super.call(this) || this;
        _this.httpClient = httpClient;
        _this.options = options;
        _this.requester = (/**
         * @param {?} operation
         * @return {?}
         */
        function (operation) {
            return new LinkObservable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                /** @type {?} */
                var context = operation.getContext();
                // decides which value to pick, Context, Options or to just use the default
                /** @type {?} */
                var pick = (/**
                 * @template K
                 * @param {?} key
                 * @param {?=} init
                 * @return {?}
                 */
                function (key, init) {
                    return prioritize(context[key], _this.options[key], init);
                });
                /** @type {?} */
                var includeQuery = pick('includeQuery', true);
                /** @type {?} */
                var includeExtensions = pick('includeExtensions', false);
                /** @type {?} */
                var method = pick('method', 'POST');
                /** @type {?} */
                var url = pick('uri', 'graphql');
                /** @type {?} */
                var withCredentials = pick('withCredentials');
                /** @type {?} */
                var req = {
                    method: method,
                    url: typeof url === 'function' ? url(operation) : url,
                    body: {
                        operationName: operation.operationName,
                        variables: operation.variables,
                    },
                    options: {
                        withCredentials: withCredentials,
                        headers: _this.options.headers,
                    },
                };
                if (includeExtensions) {
                    ((/** @type {?} */ (req.body))).extensions = operation.extensions;
                }
                if (includeQuery) {
                    ((/** @type {?} */ (req.body))).query = print(operation.query);
                }
                if (context.headers) {
                    req.options.headers = mergeHeaders(req.options.headers, context.headers);
                }
                /** @type {?} */
                var sub = fetch(req, _this.httpClient).subscribe({
                    next: (/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        operation.setContext({ response: response });
                        observer.next(response.body);
                    }),
                    error: (/**
                     * @param {?} err
                     * @return {?}
                     */
                    function (err) { return observer.error(err); }),
                    complete: (/**
                     * @return {?}
                     */
                    function () { return observer.complete(); }),
                });
                return (/**
                 * @return {?}
                 */
                function () {
                    if (!sub.closed) {
                        sub.unsubscribe();
                    }
                });
            }));
        });
        return _this;
    }
    /**
     * @param {?} op
     * @return {?}
     */
    HttpLinkHandler.prototype.request = /**
     * @param {?} op
     * @return {?}
     */
    function (op) {
        return this.requester(op);
    };
    return HttpLinkHandler;
}(ApolloLink));
// XXX find a better name for it
export { HttpLinkHandler };
if (false) {
    /** @type {?} */
    HttpLinkHandler.prototype.requester;
    /**
     * @type {?}
     * @private
     */
    HttpLinkHandler.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    HttpLinkHandler.prototype.options;
}
var HttpLink = /** @class */ (function () {
    function HttpLink(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    HttpLink.prototype.create = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new HttpLinkHandler(this.httpClient, options);
    };
    HttpLink.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpLink.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return HttpLink;
}());
export { HttpLink };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpLink.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHR0cExpbmsuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAvIiwic291cmNlcyI6WyJIdHRwTGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFDTCxVQUFVLEVBQ1YsVUFBVSxJQUFJLGNBQWMsR0FJN0IsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQy9DLE9BQU8sRUFDTCxLQUFLLEVBS0wsWUFBWSxFQUNaLFVBQVUsR0FDWCxNQUFNLGlDQUFpQyxDQUFDOztBQUd6Qzs7O0lBQXFDLDJDQUFVO0lBRzdDLHlCQUFvQixVQUFzQixFQUFVLE9BQWdCO1FBQXBFLFlBQ0UsaUJBQU8sU0ErRFI7UUFoRW1CLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsYUFBTyxHQUFQLE9BQU8sQ0FBUztRQUdsRSxLQUFJLENBQUMsU0FBUzs7OztRQUFHLFVBQUMsU0FBb0I7WUFDcEMsT0FBQSxJQUFJLGNBQWM7Ozs7WUFBQyxVQUFDLFFBQWE7O29CQUN6QixPQUFPLEdBQVksU0FBUyxDQUFDLFVBQVUsRUFBRTs7O29CQUd6QyxJQUFJOzs7Ozs7Z0JBQUcsVUFDWCxHQUFNLEVBQ04sSUFBOEI7b0JBRTlCLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUMzRCxDQUFDLENBQUE7O29CQUVLLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQzs7b0JBQ3pDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUM7O29CQUNwRCxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7O29CQUMvQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7O29CQUM1QixlQUFlLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDOztvQkFFekMsR0FBRyxHQUFZO29CQUNuQixNQUFNLFFBQUE7b0JBQ04sR0FBRyxFQUFFLE9BQU8sR0FBRyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO29CQUNyRCxJQUFJLEVBQUU7d0JBQ0osYUFBYSxFQUFFLFNBQVMsQ0FBQyxhQUFhO3dCQUN0QyxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVM7cUJBQy9CO29CQUNELE9BQU8sRUFBRTt3QkFDUCxlQUFlLGlCQUFBO3dCQUNmLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87cUJBQzlCO2lCQUNGO2dCQUVELElBQUksaUJBQWlCLEVBQUU7b0JBQ3JCLENBQUMsbUJBQUEsR0FBRyxDQUFDLElBQUksRUFBUSxDQUFDLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUM7aUJBQ3REO2dCQUVELElBQUksWUFBWSxFQUFFO29CQUNoQixDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQVEsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuRDtnQkFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7b0JBQ25CLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FDaEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQ25CLE9BQU8sQ0FBQyxPQUFPLENBQ2hCLENBQUM7aUJBQ0g7O29CQUVLLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUM7b0JBQ2hELElBQUk7Ozs7b0JBQUUsVUFBQSxRQUFRO3dCQUNaLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBQyxRQUFRLFVBQUEsRUFBQyxDQUFDLENBQUM7d0JBQ2pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUMvQixDQUFDLENBQUE7b0JBQ0QsS0FBSzs7OztvQkFBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQW5CLENBQW1CLENBQUE7b0JBQ2pDLFFBQVE7OztvQkFBRSxjQUFNLE9BQUEsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFuQixDQUFtQixDQUFBO2lCQUNwQyxDQUFDO2dCQUVGOzs7Z0JBQU87b0JBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7d0JBQ2YsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO3FCQUNuQjtnQkFDSCxDQUFDLEVBQUM7WUFDSixDQUFDLEVBQUM7UUEzREYsQ0EyREUsQ0FBQSxDQUFDOztJQUNQLENBQUM7Ozs7O0lBRU0saUNBQU87Ozs7SUFBZCxVQUFlLEVBQWE7UUFDMUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUF4RUQsQ0FBcUMsVUFBVSxHQXdFOUM7Ozs7O0lBdkVDLG9DQUFpQzs7Ozs7SUFFckIscUNBQThCOzs7OztJQUFFLGtDQUF3Qjs7QUF1RXRFO0lBRUUsa0JBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBRyxDQUFDOzs7OztJQUV2Qyx5QkFBTTs7OztJQUFiLFVBQWMsT0FBZ0I7UUFDNUIsT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7O2dCQU5GLFVBQVU7Ozs7Z0JBOUZILFVBQVU7O0lBcUdsQixlQUFDO0NBQUEsQUFQRCxJQU9DO1NBTlksUUFBUTs7Ozs7O0lBQ1AsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtcbiAgQXBvbGxvTGluayxcbiAgT2JzZXJ2YWJsZSBhcyBMaW5rT2JzZXJ2YWJsZSxcbiAgT3BlcmF0aW9uLFxuICBSZXF1ZXN0SGFuZGxlcixcbiAgRmV0Y2hSZXN1bHQsXG59IGZyb20gJ2Fwb2xsby1saW5rJztcbmltcG9ydCB7cHJpbnR9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRlcic7XG5pbXBvcnQge1xuICBmZXRjaCxcbiAgT3B0aW9ucyxcbiAgQm9keSxcbiAgUmVxdWVzdCxcbiAgQ29udGV4dCxcbiAgbWVyZ2VIZWFkZXJzLFxuICBwcmlvcml0aXplLFxufSBmcm9tICdhcG9sbG8tYW5ndWxhci1saW5rLWh0dHAtY29tbW9uJztcblxuLy8gWFhYIGZpbmQgYSBiZXR0ZXIgbmFtZSBmb3IgaXRcbmV4cG9ydCBjbGFzcyBIdHRwTGlua0hhbmRsZXIgZXh0ZW5kcyBBcG9sbG9MaW5rIHtcbiAgcHVibGljIHJlcXVlc3RlcjogUmVxdWVzdEhhbmRsZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBwcml2YXRlIG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5yZXF1ZXN0ZXIgPSAob3BlcmF0aW9uOiBPcGVyYXRpb24pID0+XG4gICAgICBuZXcgTGlua09ic2VydmFibGUoKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dDogQ29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG5cbiAgICAgICAgLy8gZGVjaWRlcyB3aGljaCB2YWx1ZSB0byBwaWNrLCBDb250ZXh0LCBPcHRpb25zIG9yIHRvIGp1c3QgdXNlIHRoZSBkZWZhdWx0XG4gICAgICAgIGNvbnN0IHBpY2sgPSA8SyBleHRlbmRzIGtleW9mIENvbnRleHQgfCBrZXlvZiBPcHRpb25zPihcbiAgICAgICAgICBrZXk6IEssXG4gICAgICAgICAgaW5pdD86IENvbnRleHRbS10gfCBPcHRpb25zW0tdLFxuICAgICAgICApOiBDb250ZXh0W0tdIHwgT3B0aW9uc1tLXSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHByaW9yaXRpemUoY29udGV4dFtrZXldLCB0aGlzLm9wdGlvbnNba2V5XSwgaW5pdCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaW5jbHVkZVF1ZXJ5ID0gcGljaygnaW5jbHVkZVF1ZXJ5JywgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVFeHRlbnNpb25zID0gcGljaygnaW5jbHVkZUV4dGVuc2lvbnMnLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHBpY2soJ21ldGhvZCcsICdQT1NUJyk7XG4gICAgICAgIGNvbnN0IHVybCA9IHBpY2soJ3VyaScsICdncmFwaHFsJyk7XG4gICAgICAgIGNvbnN0IHdpdGhDcmVkZW50aWFscyA9IHBpY2soJ3dpdGhDcmVkZW50aWFscycpO1xuXG4gICAgICAgIGNvbnN0IHJlcTogUmVxdWVzdCA9IHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgdXJsOiB0eXBlb2YgdXJsID09PSAnZnVuY3Rpb24nID8gdXJsKG9wZXJhdGlvbikgOiB1cmwsXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IG9wZXJhdGlvbi52YXJpYWJsZXMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpbmNsdWRlRXh0ZW5zaW9ucykge1xuICAgICAgICAgIChyZXEuYm9keSBhcyBCb2R5KS5leHRlbnNpb25zID0gb3BlcmF0aW9uLmV4dGVuc2lvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5jbHVkZVF1ZXJ5KSB7XG4gICAgICAgICAgKHJlcS5ib2R5IGFzIEJvZHkpLnF1ZXJ5ID0gcHJpbnQob3BlcmF0aW9uLnF1ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0LmhlYWRlcnMpIHtcbiAgICAgICAgICByZXEub3B0aW9ucy5oZWFkZXJzID0gbWVyZ2VIZWFkZXJzKFxuICAgICAgICAgICAgcmVxLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgIGNvbnRleHQuaGVhZGVycyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3ViID0gZmV0Y2gocmVxLCB0aGlzLmh0dHBDbGllbnQpLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgb3BlcmF0aW9uLnNldENvbnRleHQoe3Jlc3BvbnNlfSk7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGVyciA9PiBvYnNlcnZlci5lcnJvcihlcnIpLFxuICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiBvYnNlcnZlci5jb21wbGV0ZSgpLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGlmICghc3ViLmNsb3NlZCkge1xuICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVxdWVzdChvcDogT3BlcmF0aW9uKTogTGlua09ic2VydmFibGU8RmV0Y2hSZXN1bHQ+IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdGVyKG9wKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSHR0cExpbmsge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgcHVibGljIGNyZWF0ZShvcHRpb25zOiBPcHRpb25zKTogSHR0cExpbmtIYW5kbGVyIHtcbiAgICByZXR1cm4gbmV3IEh0dHBMaW5rSGFuZGxlcih0aGlzLmh0dHBDbGllbnQsIG9wdGlvbnMpO1xuICB9XG59XG4iXX0=